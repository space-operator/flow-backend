#![allow(non_snake_case)]

use std::convert::Infallible;

use capnp::{ErrorKind, NotInSchema};
use serde::{Deserialize, Serialize};
use serde_with::{serde_as, serde_conv};

#[derive(Serialize, Deserialize)]
pub enum AsCapnpErrorKindImpl {
    Failed,
    Overloaded,
    Disconnected,
    Unimplemented,
    BufferNotLargeEnough,
    CannotCreateACanonicalMessageWithACapability,
    CannotSetAnyPointerFieldToAPrimitiveValue,
    CantHandleNonStructInlineComposite,
    EmptyBuffer,
    EmptySlice,
    EnumValueOrUnionDiscriminantNotPresent(u16),
    ExistingListPointerIsNotByteSized,
    ExistingListValueIsIncompatibleWithExpectedType,
    ExistingPointerIsNotAList,
    ExpectedAListOrBlob,
    ExpectedAPointerListButGotAListOfDataOnlyStructs,
    ExpectedAPrimitiveListButGotAListOfPointerOnlyStructs,
    FailedToFillTheWholeBuffer,
    FieldAndDefaultMismatch,
    FieldNotFound,
    FoundBitListWhereStructListWasExpected,
    FoundStructListWhereBitListWasExpected,
    FourByteLengthTooBigForUSize,
    FourByteSegmentLengthTooBigForUSize,
    GroupFieldButTypeIsNotStruct,
    InitIsOnlyValidForStructAndAnyPointerFields,
    InitnIsOnlyValidForListTextOrDataFields,
    InlineCompositeListWithNonStructElementsNotSupported,
    InlineCompositeListsElementsOverrunItsWordCount,
    InlineCompositeListsOfNonStructTypeAreNotSupported,
    InvalidNumberOfSegments(usize),
    InvalidSegmentId(u32),
    ListAnyPointerNotSupported,
    ListCapabilityNotSupported,
    MalformedDoubleFarPointer,
    MessageContainsInvalidCapabilityPointer,
    MessageContainsListPointerOfNonBytesWhereDataWasExpected,
    MessageContainsListPointerOfNonBytesWhereTextWasExpected,
    MessageContainsListWithIncompatibleElementType,
    MessageContainsNonCapabilityPointerWhereCapabilityPointerWasExpected,
    MessageContainsNonStructPointerWhereStructPointerWasExpected,
    MessageContainsNonListPointerWhereDataWasExpected,
    MessageContainsNonListPointerWhereListPointerWasExpected,
    MessageContainsNonListPointerWhereTextWasExpected,
    MessageContainsNullCapabilityPointer,
    MessageContainsOutOfBoundsPointer,
    MessageContainsTextThatIsNotNULTerminated,
    MessageEndsPrematurely(usize, usize),
    MessageIsTooDeeplyNested,
    MessageIsTooDeeplyNestedOrContainsCycles,
    MessageNotAlignedBy8BytesBoundary,
    MessageSizeOverflow,
    MessageTooLarge(usize),
    NestingLimitExceeded,
    NotAStruct,
    OnlyOneOfTheSectionPointersIsPointingToOurself,
    PackedInputDidNotEndCleanlyOnASegmentBoundary,
    PrematureEndOfFile,
    PrematureEndOfPackedInput,
    ReadLimitExceeded,
    SettingDynamicCapabilitiesIsUnsupported,
    StructReaderHadBitwidthOtherThan1,
    TextBlobMissingNULTerminator,
    // TextContainsNonUtf8Data(Utf8Error), cannot construct Utf8Error
    TriedToReadFromNullArena,
    TypeMismatch,
    UnalignedSegment,
    UnexpectedFarPointer,
    UnknownPointerType,
}

fn ser_CapnpErrorKind(error: &ErrorKind) -> AsCapnpErrorKindImpl {
    match error {
        ErrorKind::Failed => AsCapnpErrorKindImpl::Failed,
        ErrorKind::Overloaded => AsCapnpErrorKindImpl::Overloaded,
        ErrorKind::Disconnected => AsCapnpErrorKindImpl::Disconnected,
        ErrorKind::Unimplemented => AsCapnpErrorKindImpl::Unimplemented,
        ErrorKind::BufferNotLargeEnough => AsCapnpErrorKindImpl::BufferNotLargeEnough,
        ErrorKind::CannotCreateACanonicalMessageWithACapability => AsCapnpErrorKindImpl::CannotCreateACanonicalMessageWithACapability,
        ErrorKind::CannotSetAnyPointerFieldToAPrimitiveValue => AsCapnpErrorKindImpl::CannotSetAnyPointerFieldToAPrimitiveValue,
        ErrorKind::CantHandleNonStructInlineComposite => AsCapnpErrorKindImpl::CantHandleNonStructInlineComposite,
        ErrorKind::EmptyBuffer => AsCapnpErrorKindImpl::EmptyBuffer,
        ErrorKind::EmptySlice => AsCapnpErrorKindImpl::EmptySlice,
        ErrorKind::EnumValueOrUnionDiscriminantNotPresent(not_in_schema) => AsCapnpErrorKindImpl::EnumValueOrUnionDiscriminantNotPresent(not_in_schema.0),
        ErrorKind::ExistingListPointerIsNotByteSized => AsCapnpErrorKindImpl::ExistingListPointerIsNotByteSized,
        ErrorKind::ExistingListValueIsIncompatibleWithExpectedType => AsCapnpErrorKindImpl::ExistingListValueIsIncompatibleWithExpectedType,
        ErrorKind::ExistingPointerIsNotAList => AsCapnpErrorKindImpl::ExistingPointerIsNotAList,
        ErrorKind::ExpectedAListOrBlob => AsCapnpErrorKindImpl::ExpectedAListOrBlob,
        ErrorKind::ExpectedAPointerListButGotAListOfDataOnlyStructs => AsCapnpErrorKindImpl::ExpectedAPointerListButGotAListOfDataOnlyStructs,
        ErrorKind::ExpectedAPrimitiveListButGotAListOfPointerOnlyStructs => AsCapnpErrorKindImpl::ExpectedAPrimitiveListButGotAListOfPointerOnlyStructs,
        ErrorKind::FailedToFillTheWholeBuffer => AsCapnpErrorKindImpl::FailedToFillTheWholeBuffer,
        ErrorKind::FieldAndDefaultMismatch => AsCapnpErrorKindImpl::FieldAndDefaultMismatch,
        ErrorKind::FieldNotFound => AsCapnpErrorKindImpl::FieldNotFound,
        ErrorKind::FoundBitListWhereStructListWasExpected => AsCapnpErrorKindImpl::FoundBitListWhereStructListWasExpected,
        ErrorKind::FoundStructListWhereBitListWasExpected => AsCapnpErrorKindImpl::FoundStructListWhereBitListWasExpected,
        ErrorKind::FourByteLengthTooBigForUSize => AsCapnpErrorKindImpl::FourByteLengthTooBigForUSize,
        ErrorKind::FourByteSegmentLengthTooBigForUSize => AsCapnpErrorKindImpl::FourByteSegmentLengthTooBigForUSize,
        ErrorKind::GroupFieldButTypeIsNotStruct => AsCapnpErrorKindImpl::GroupFieldButTypeIsNotStruct,
        ErrorKind::InitIsOnlyValidForStructAndAnyPointerFields => AsCapnpErrorKindImpl::InitIsOnlyValidForStructAndAnyPointerFields,
        ErrorKind::InitnIsOnlyValidForListTextOrDataFields => AsCapnpErrorKindImpl::InitnIsOnlyValidForListTextOrDataFields,
        ErrorKind::InlineCompositeListWithNonStructElementsNotSupported => AsCapnpErrorKindImpl::InlineCompositeListWithNonStructElementsNotSupported,
        ErrorKind::InlineCompositeListsElementsOverrunItsWordCount => AsCapnpErrorKindImpl::InlineCompositeListsElementsOverrunItsWordCount,
        ErrorKind::InlineCompositeListsOfNonStructTypeAreNotSupported => AsCapnpErrorKindImpl::InlineCompositeListsOfNonStructTypeAreNotSupported,
        ErrorKind::InvalidNumberOfSegments(x) => AsCapnpErrorKindImpl::InvalidNumberOfSegments(*x),
        ErrorKind::InvalidSegmentId(x) => AsCapnpErrorKindImpl::InvalidSegmentId(*x),
        ErrorKind::ListAnyPointerNotSupported => AsCapnpErrorKindImpl::ListAnyPointerNotSupported,
        ErrorKind::ListCapabilityNotSupported => AsCapnpErrorKindImpl::ListCapabilityNotSupported,
        ErrorKind::MalformedDoubleFarPointer => AsCapnpErrorKindImpl::MalformedDoubleFarPointer,
        ErrorKind::MessageContainsInvalidCapabilityPointer => AsCapnpErrorKindImpl::MessageContainsInvalidCapabilityPointer,
        ErrorKind::MessageContainsListPointerOfNonBytesWhereDataWasExpected => AsCapnpErrorKindImpl::MessageContainsListPointerOfNonBytesWhereDataWasExpected,
        ErrorKind::MessageContainsListPointerOfNonBytesWhereTextWasExpected => AsCapnpErrorKindImpl::MessageContainsListPointerOfNonBytesWhereTextWasExpected,
        ErrorKind::MessageContainsListWithIncompatibleElementType => AsCapnpErrorKindImpl::MessageContainsListWithIncompatibleElementType,
        ErrorKind::MessageContainsNonCapabilityPointerWhereCapabilityPointerWasExpected => AsCapnpErrorKindImpl::MessageContainsNonCapabilityPointerWhereCapabilityPointerWasExpected,
        ErrorKind::MessageContainsNonStructPointerWhereStructPointerWasExpected => AsCapnpErrorKindImpl::MessageContainsNonStructPointerWhereStructPointerWasExpected,
        ErrorKind::MessageContainsNonListPointerWhereDataWasExpected => AsCapnpErrorKindImpl::MessageContainsNonListPointerWhereDataWasExpected,
        ErrorKind::MessageContainsNonListPointerWhereListPointerWasExpected => AsCapnpErrorKindImpl::MessageContainsNonListPointerWhereListPointerWasExpected,
        ErrorKind::MessageContainsNonListPointerWhereTextWasExpected => AsCapnpErrorKindImpl::MessageContainsNonListPointerWhereTextWasExpected,
        ErrorKind::MessageContainsNullCapabilityPointer => AsCapnpErrorKindImpl::MessageContainsNullCapabilityPointer,
        ErrorKind::MessageContainsOutOfBoundsPointer => AsCapnpErrorKindImpl::MessageContainsOutOfBoundsPointer,
        ErrorKind::MessageContainsTextThatIsNotNULTerminated => AsCapnpErrorKindImpl::MessageContainsTextThatIsNotNULTerminated,
        ErrorKind::MessageEndsPrematurely(x, y) => AsCapnpErrorKindImpl::MessageEndsPrematurely(*x, *y),
        ErrorKind::MessageIsTooDeeplyNested => AsCapnpErrorKindImpl::MessageIsTooDeeplyNested,
        ErrorKind::MessageIsTooDeeplyNestedOrContainsCycles => AsCapnpErrorKindImpl::MessageIsTooDeeplyNestedOrContainsCycles,
        ErrorKind::MessageNotAlignedBy8BytesBoundary => AsCapnpErrorKindImpl::MessageNotAlignedBy8BytesBoundary,
        ErrorKind::MessageSizeOverflow => AsCapnpErrorKindImpl::MessageSizeOverflow,
        ErrorKind::MessageTooLarge(x) => AsCapnpErrorKindImpl::MessageTooLarge(*x),
        ErrorKind::NestingLimitExceeded => AsCapnpErrorKindImpl::NestingLimitExceeded,
        ErrorKind::NotAStruct => AsCapnpErrorKindImpl::NotAStruct,
        ErrorKind::OnlyOneOfTheSectionPointersIsPointingToOurself => AsCapnpErrorKindImpl::OnlyOneOfTheSectionPointersIsPointingToOurself,
        ErrorKind::PackedInputDidNotEndCleanlyOnASegmentBoundary => AsCapnpErrorKindImpl::PackedInputDidNotEndCleanlyOnASegmentBoundary,
        ErrorKind::PrematureEndOfFile => AsCapnpErrorKindImpl::PrematureEndOfFile,
        ErrorKind::PrematureEndOfPackedInput => AsCapnpErrorKindImpl::PrematureEndOfPackedInput,
        ErrorKind::ReadLimitExceeded => AsCapnpErrorKindImpl::ReadLimitExceeded,
        ErrorKind::SettingDynamicCapabilitiesIsUnsupported => AsCapnpErrorKindImpl::SettingDynamicCapabilitiesIsUnsupported,
        ErrorKind::StructReaderHadBitwidthOtherThan1 => AsCapnpErrorKindImpl::StructReaderHadBitwidthOtherThan1,
        ErrorKind::TextBlobMissingNULTerminator => AsCapnpErrorKindImpl::TextBlobMissingNULTerminator,
        ErrorKind::TextContainsNonUtf8Data(_) => AsCapnpErrorKindImpl::Failed,
        ErrorKind::TriedToReadFromNullArena => AsCapnpErrorKindImpl::TriedToReadFromNullArena,
        ErrorKind::TypeMismatch => AsCapnpErrorKindImpl::TypeMismatch,
        ErrorKind::UnalignedSegment => AsCapnpErrorKindImpl::UnalignedSegment,
        ErrorKind::UnexpectedFarPointer => AsCapnpErrorKindImpl::UnexpectedFarPointer,
        ErrorKind::UnknownPointerType => AsCapnpErrorKindImpl::UnknownPointerType,
        _ => AsCapnpErrorKindImpl::Failed,
    }
}

fn de_CapnpErrorKind(error: AsCapnpErrorKindImpl) -> Result<ErrorKind, Infallible> {
    Ok(match error {
        AsCapnpErrorKindImpl::Failed => ErrorKind::Failed,
        AsCapnpErrorKindImpl::Overloaded => ErrorKind::Overloaded,
        AsCapnpErrorKindImpl::Disconnected => ErrorKind::Disconnected,
        AsCapnpErrorKindImpl::Unimplemented => ErrorKind::Unimplemented,
        AsCapnpErrorKindImpl::BufferNotLargeEnough => ErrorKind::BufferNotLargeEnough,
        AsCapnpErrorKindImpl::CannotCreateACanonicalMessageWithACapability => ErrorKind::CannotCreateACanonicalMessageWithACapability,
        AsCapnpErrorKindImpl::CannotSetAnyPointerFieldToAPrimitiveValue => ErrorKind::CannotSetAnyPointerFieldToAPrimitiveValue,
        AsCapnpErrorKindImpl::CantHandleNonStructInlineComposite => ErrorKind::CantHandleNonStructInlineComposite,
        AsCapnpErrorKindImpl::EmptyBuffer => ErrorKind::EmptyBuffer,
        AsCapnpErrorKindImpl::EmptySlice => ErrorKind::EmptySlice,
        AsCapnpErrorKindImpl::EnumValueOrUnionDiscriminantNotPresent(x) => ErrorKind::EnumValueOrUnionDiscriminantNotPresent(NotInSchema(x)),
        AsCapnpErrorKindImpl::ExistingListPointerIsNotByteSized => ErrorKind::ExistingListPointerIsNotByteSized,
        AsCapnpErrorKindImpl::ExistingListValueIsIncompatibleWithExpectedType => ErrorKind::ExistingListValueIsIncompatibleWithExpectedType,
        AsCapnpErrorKindImpl::ExistingPointerIsNotAList => ErrorKind::ExistingPointerIsNotAList,
        AsCapnpErrorKindImpl::ExpectedAListOrBlob => ErrorKind::ExpectedAListOrBlob,
        AsCapnpErrorKindImpl::ExpectedAPointerListButGotAListOfDataOnlyStructs => ErrorKind::ExpectedAPointerListButGotAListOfDataOnlyStructs,
        AsCapnpErrorKindImpl::ExpectedAPrimitiveListButGotAListOfPointerOnlyStructs => ErrorKind::ExpectedAPrimitiveListButGotAListOfPointerOnlyStructs,
        AsCapnpErrorKindImpl::FailedToFillTheWholeBuffer => ErrorKind::FailedToFillTheWholeBuffer,
        AsCapnpErrorKindImpl::FieldAndDefaultMismatch => ErrorKind::FieldAndDefaultMismatch,
        AsCapnpErrorKindImpl::FieldNotFound => ErrorKind::FieldNotFound,
        AsCapnpErrorKindImpl::FoundBitListWhereStructListWasExpected => ErrorKind::FoundBitListWhereStructListWasExpected,
        AsCapnpErrorKindImpl::FoundStructListWhereBitListWasExpected => ErrorKind::FoundStructListWhereBitListWasExpected,
        AsCapnpErrorKindImpl::FourByteLengthTooBigForUSize => ErrorKind::FourByteLengthTooBigForUSize,
        AsCapnpErrorKindImpl::FourByteSegmentLengthTooBigForUSize => ErrorKind::FourByteSegmentLengthTooBigForUSize,
        AsCapnpErrorKindImpl::GroupFieldButTypeIsNotStruct => ErrorKind::GroupFieldButTypeIsNotStruct,
        AsCapnpErrorKindImpl::InitIsOnlyValidForStructAndAnyPointerFields => ErrorKind::InitIsOnlyValidForStructAndAnyPointerFields,
        AsCapnpErrorKindImpl::InitnIsOnlyValidForListTextOrDataFields => ErrorKind::InitnIsOnlyValidForListTextOrDataFields,
        AsCapnpErrorKindImpl::InlineCompositeListWithNonStructElementsNotSupported => ErrorKind::InlineCompositeListWithNonStructElementsNotSupported,
        AsCapnpErrorKindImpl::InlineCompositeListsElementsOverrunItsWordCount => ErrorKind::InlineCompositeListsElementsOverrunItsWordCount,
        AsCapnpErrorKindImpl::InlineCompositeListsOfNonStructTypeAreNotSupported => ErrorKind::InlineCompositeListsOfNonStructTypeAreNotSupported,
        AsCapnpErrorKindImpl::InvalidNumberOfSegments(x) => ErrorKind::InvalidNumberOfSegments(x),
        AsCapnpErrorKindImpl::InvalidSegmentId(x) => ErrorKind::InvalidSegmentId(x),
        AsCapnpErrorKindImpl::ListAnyPointerNotSupported => ErrorKind::ListAnyPointerNotSupported,
        AsCapnpErrorKindImpl::ListCapabilityNotSupported => ErrorKind::ListCapabilityNotSupported,
        AsCapnpErrorKindImpl::MalformedDoubleFarPointer => ErrorKind::MalformedDoubleFarPointer,
        AsCapnpErrorKindImpl::MessageContainsInvalidCapabilityPointer => ErrorKind::MessageContainsInvalidCapabilityPointer,
        AsCapnpErrorKindImpl::MessageContainsListPointerOfNonBytesWhereDataWasExpected => ErrorKind::MessageContainsListPointerOfNonBytesWhereDataWasExpected,
        AsCapnpErrorKindImpl::MessageContainsListPointerOfNonBytesWhereTextWasExpected => ErrorKind::MessageContainsListPointerOfNonBytesWhereTextWasExpected,
        AsCapnpErrorKindImpl::MessageContainsListWithIncompatibleElementType => ErrorKind::MessageContainsListWithIncompatibleElementType,
        AsCapnpErrorKindImpl::MessageContainsNonCapabilityPointerWhereCapabilityPointerWasExpected => ErrorKind::MessageContainsNonCapabilityPointerWhereCapabilityPointerWasExpected,
        AsCapnpErrorKindImpl::MessageContainsNonStructPointerWhereStructPointerWasExpected => ErrorKind::MessageContainsNonStructPointerWhereStructPointerWasExpected,
        AsCapnpErrorKindImpl::MessageContainsNonListPointerWhereDataWasExpected => ErrorKind::MessageContainsNonListPointerWhereDataWasExpected,
        AsCapnpErrorKindImpl::MessageContainsNonListPointerWhereListPointerWasExpected => ErrorKind::MessageContainsNonListPointerWhereListPointerWasExpected,
        AsCapnpErrorKindImpl::MessageContainsNonListPointerWhereTextWasExpected => ErrorKind::MessageContainsNonListPointerWhereTextWasExpected,
        AsCapnpErrorKindImpl::MessageContainsNullCapabilityPointer => ErrorKind::MessageContainsNullCapabilityPointer,
        AsCapnpErrorKindImpl::MessageContainsOutOfBoundsPointer => ErrorKind::MessageContainsOutOfBoundsPointer,
        AsCapnpErrorKindImpl::MessageContainsTextThatIsNotNULTerminated => ErrorKind::MessageContainsTextThatIsNotNULTerminated,
        AsCapnpErrorKindImpl::MessageEndsPrematurely(x, y) => ErrorKind::MessageEndsPrematurely(x, y),
        AsCapnpErrorKindImpl::MessageIsTooDeeplyNested => ErrorKind::MessageIsTooDeeplyNested,
        AsCapnpErrorKindImpl::MessageIsTooDeeplyNestedOrContainsCycles => ErrorKind::MessageIsTooDeeplyNestedOrContainsCycles,
        AsCapnpErrorKindImpl::MessageNotAlignedBy8BytesBoundary => ErrorKind::MessageNotAlignedBy8BytesBoundary,
        AsCapnpErrorKindImpl::MessageSizeOverflow => ErrorKind::MessageSizeOverflow,
        AsCapnpErrorKindImpl::MessageTooLarge(x) => ErrorKind::MessageTooLarge(x),
        AsCapnpErrorKindImpl::NestingLimitExceeded => ErrorKind::NestingLimitExceeded,
        AsCapnpErrorKindImpl::NotAStruct => ErrorKind::NotAStruct,
        AsCapnpErrorKindImpl::OnlyOneOfTheSectionPointersIsPointingToOurself => ErrorKind::OnlyOneOfTheSectionPointersIsPointingToOurself,
        AsCapnpErrorKindImpl::PackedInputDidNotEndCleanlyOnASegmentBoundary => ErrorKind::PackedInputDidNotEndCleanlyOnASegmentBoundary,
        AsCapnpErrorKindImpl::PrematureEndOfFile => ErrorKind::PrematureEndOfFile,
        AsCapnpErrorKindImpl::PrematureEndOfPackedInput => ErrorKind::PrematureEndOfPackedInput,
        AsCapnpErrorKindImpl::ReadLimitExceeded => ErrorKind::ReadLimitExceeded,
        AsCapnpErrorKindImpl::SettingDynamicCapabilitiesIsUnsupported => ErrorKind::SettingDynamicCapabilitiesIsUnsupported,
        AsCapnpErrorKindImpl::StructReaderHadBitwidthOtherThan1 => ErrorKind::StructReaderHadBitwidthOtherThan1,
        AsCapnpErrorKindImpl::TextBlobMissingNULTerminator => ErrorKind::TextBlobMissingNULTerminator,
        AsCapnpErrorKindImpl::TriedToReadFromNullArena => ErrorKind::TriedToReadFromNullArena,
        AsCapnpErrorKindImpl::TypeMismatch => ErrorKind::TypeMismatch,
        AsCapnpErrorKindImpl::UnalignedSegment => ErrorKind::UnalignedSegment,
        AsCapnpErrorKindImpl::UnexpectedFarPointer => ErrorKind::UnexpectedFarPointer,
        AsCapnpErrorKindImpl::UnknownPointerType => ErrorKind::UnknownPointerType,
    })
}

serde_conv!(
    AsCapnpErrorKind,
    ErrorKind,
    ser_CapnpErrorKind,
    de_CapnpErrorKind
);

#[serde_as]
#[derive(Serialize, Deserialize)]
pub struct AsCapnpImpl {
    #[serde_as(as = "AsCapnpErrorKind")]
    pub kind: ErrorKind,
    pub extra: String,
}

fn ser_Capnp(error: &capnp::Error) -> AsCapnpImpl {
    AsCapnpImpl {
        kind: error.kind,
        extra: error.extra.clone(),
    }
}

fn de_Capnp(error: AsCapnpImpl) -> Result<capnp::Error, Infallible> {
    Ok(capnp::Error {
        kind: error.kind,
        extra: error.extra,
    })
}

serde_conv!(pub AsCapnp, capnp::Error, ser_Capnp, de_Capnp);
